note: between: {start} {end}
between: {start} {end}

regexp: (\d+)

code: <<RAKU
!raku
use Data::Dump;
say captures();
say Dump(streams());
RAKU


generator: <<RAKU
!raku
say "assert: ", captures().elems == 12 ?? 1 !! 0, " 12 captures";
say "assert: ", captures()[0][0] == 100 ?? 1 !! 0, " first cap is 100";
say "assert: ", captures()[11][0] == 12 ?? 1 !! 0, " last cap is 12";

RAKU

end:

note: context reset

regexp: (\d+)

generator: print 'assert: ',( scalar @{captures()} == 15 ), ' 15 numbers total';
generator: print 'assert: ',( captures->[0]->[0] == 100 ), ' first number is 100';
generator: print 'assert: ',( captures->[1]->[0] == 0 ), ' second number is 0';
generator: print 'assert: ',( captures->[2]->[0] == 3 ), ' third number is 3';
generator: print 'assert: ',( captures->[3]->[0] == 4 ), ' forth number is 4';
generator: print 'assert: ',( captures->[4]->[0] == 5 ), ' fifth number is 5';
generator: print 'assert: ',( captures->[14]->[0] == 73 ), ' last (15-th) number is 73';
generator: print 'assert: ',! defined captures->[15], ' 16-th number is not defined';

