between: {start} {end}

regexp: (\d+)

generator: print 'assert: ', ( scalar @{captures()} == 11 ), ' 11 numbers between start ... end';

#code: <<CODE

#for my $s (@{stream()}){                
#    for my $i (@{$s}){                  
#        print 'assert: ',"# $i\n";                 
#    }                                   
#    print 'assert: ',"#---\n\n"                    
#}

#CODE


generator: print 'assert: ',( captures->[0]->[0] == 0 ), ' first number is 0';
generator: print 'assert: ',( captures->[1]->[0] == 3 ), ' second number is 3';
generator: print 'assert: ',( captures->[2]->[0] == 4 ), ' third number is 4';
generator: print 'assert: ',( captures->[3]->[0] == 5 ), ' forth number is 5';

generator: print 'assert: ',( captures->[4]->[0] == 6 ), ' fith number is 6';
generator: print 'assert: ',( captures->[5]->[0] == 7 ), ' six number is 7';
generator: print 'assert: ',( captures->[6]->[0] == 8 ), ' seven number is 8';
generator: print 'assert: ',( captures->[7]->[0] == 9 ), ' eight number is 9';

end:

code: print "context reset"

regexp: (\d+)

generator: print 'assert: ',( scalar @{captures()} == 15 ), ' 15 numbers total';
generator: print 'assert: ',( captures->[0]->[0] == 100 ), ' first number is 100';
generator: print 'assert: ',( captures->[1]->[0] == 0 ), ' second number is 0';
generator: print 'assert: ',( captures->[2]->[0] == 3 ), ' third number is 3';
generator: print 'assert: ',( captures->[3]->[0] == 4 ), ' forth number is 4';
generator: print 'assert: ',( captures->[4]->[0] == 5 ), ' fifth number is 5';
generator: print 'assert: ',( captures->[14]->[0] == 73 ), ' last (15-th) number is 73';
generator: print 'assert: ',! defined captures->[15], ' 16-th number is not defined';

